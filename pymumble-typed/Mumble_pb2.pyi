"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2009-2023 The Mumble Developers. All rights reserved.
Use of this source code is governed by a BSD-style license
that can be found in the LICENSE file at the root of the
Mumble source tree or at <https://www.mumble.info/LICENSE>.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Version(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERSION_V1_FIELD_NUMBER: builtins.int
    VERSION_V2_FIELD_NUMBER: builtins.int
    RELEASE_FIELD_NUMBER: builtins.int
    OS_FIELD_NUMBER: builtins.int
    OS_VERSION_FIELD_NUMBER: builtins.int
    version_v1: builtins.int
    """Legacy version number format."""
    version_v2: builtins.int
    """New version number format.
    Necessary since patch level may exceed 255. (See https://github.com/mumble-voip/mumble/issues/5827)
    """
    release: builtins.str
    """Client release name."""
    os: builtins.str
    """Client OS name."""
    os_version: builtins.str
    """Client OS version."""
    def __init__(
        self,
        *,
        version_v1: builtins.int | None = ...,
        version_v2: builtins.int | None = ...,
        release: builtins.str | None = ...,
        os: builtins.str | None = ...,
        os_version: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["os", b"os", "os_version", b"os_version", "release", b"release", "version_v1", b"version_v1", "version_v2", b"version_v2"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["os", b"os", "os_version", b"os_version", "release", b"release", "version_v1", b"version_v1", "version_v2", b"version_v2"]) -> None: ...

global___Version = Version

@typing_extensions.final
class UDPTunnel(google.protobuf.message.Message):
    """Not used. Not even for tunneling UDP through TCP."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PACKET_FIELD_NUMBER: builtins.int
    packet: builtins.bytes
    """Not used."""
    def __init__(
        self,
        *,
        packet: builtins.bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["packet", b"packet"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["packet", b"packet"]) -> None: ...

global___UDPTunnel = UDPTunnel

@typing_extensions.final
class Authenticate(google.protobuf.message.Message):
    """Used by the client to send the authentication credentials to the server."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    USERNAME_FIELD_NUMBER: builtins.int
    PASSWORD_FIELD_NUMBER: builtins.int
    TOKENS_FIELD_NUMBER: builtins.int
    CELT_VERSIONS_FIELD_NUMBER: builtins.int
    OPUS_FIELD_NUMBER: builtins.int
    CLIENT_TYPE_FIELD_NUMBER: builtins.int
    username: builtins.str
    """UTF-8 encoded username."""
    password: builtins.str
    """Server or user password."""
    @property
    def tokens(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Additional access tokens for server ACL groups."""
    @property
    def celt_versions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A list of CELT bitstream version constants supported by the client."""
    opus: builtins.bool
    client_type: builtins.int
    """0 = REGULAR, 1 = BOT"""
    def __init__(
        self,
        *,
        username: builtins.str | None = ...,
        password: builtins.str | None = ...,
        tokens: collections.abc.Iterable[builtins.str] | None = ...,
        celt_versions: collections.abc.Iterable[builtins.int] | None = ...,
        opus: builtins.bool | None = ...,
        client_type: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["client_type", b"client_type", "opus", b"opus", "password", b"password", "username", b"username"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["celt_versions", b"celt_versions", "client_type", b"client_type", "opus", b"opus", "password", b"password", "tokens", b"tokens", "username", b"username"]) -> None: ...

global___Authenticate = Authenticate

@typing_extensions.final
class Ping(google.protobuf.message.Message):
    """Sent by the client to notify the server that the client is still alive.
    Server must reply to the packet with the same timestamp and its own
    good/late/lost/resync numbers. None of the fields is strictly required.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIMESTAMP_FIELD_NUMBER: builtins.int
    GOOD_FIELD_NUMBER: builtins.int
    LATE_FIELD_NUMBER: builtins.int
    LOST_FIELD_NUMBER: builtins.int
    RESYNC_FIELD_NUMBER: builtins.int
    UDP_PACKETS_FIELD_NUMBER: builtins.int
    TCP_PACKETS_FIELD_NUMBER: builtins.int
    UDP_PING_AVG_FIELD_NUMBER: builtins.int
    UDP_PING_VAR_FIELD_NUMBER: builtins.int
    TCP_PING_AVG_FIELD_NUMBER: builtins.int
    TCP_PING_VAR_FIELD_NUMBER: builtins.int
    timestamp: builtins.int
    """Client timestamp. Server should not attempt to decode."""
    good: builtins.int
    """The amount of good packets received."""
    late: builtins.int
    """The amount of late packets received."""
    lost: builtins.int
    """The amount of packets never received."""
    resync: builtins.int
    """The amount of nonce resyncs."""
    udp_packets: builtins.int
    """The total amount of UDP packets received."""
    tcp_packets: builtins.int
    """The total amount of TCP packets received."""
    udp_ping_avg: builtins.float
    """UDP ping average."""
    udp_ping_var: builtins.float
    """UDP ping variance."""
    tcp_ping_avg: builtins.float
    """TCP ping average."""
    tcp_ping_var: builtins.float
    """TCP ping variance."""
    def __init__(
        self,
        *,
        timestamp: builtins.int | None = ...,
        good: builtins.int | None = ...,
        late: builtins.int | None = ...,
        lost: builtins.int | None = ...,
        resync: builtins.int | None = ...,
        udp_packets: builtins.int | None = ...,
        tcp_packets: builtins.int | None = ...,
        udp_ping_avg: builtins.float | None = ...,
        udp_ping_var: builtins.float | None = ...,
        tcp_ping_avg: builtins.float | None = ...,
        tcp_ping_var: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["good", b"good", "late", b"late", "lost", b"lost", "resync", b"resync", "tcp_packets", b"tcp_packets", "tcp_ping_avg", b"tcp_ping_avg", "tcp_ping_var", b"tcp_ping_var", "timestamp", b"timestamp", "udp_packets", b"udp_packets", "udp_ping_avg", b"udp_ping_avg", "udp_ping_var", b"udp_ping_var"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["good", b"good", "late", b"late", "lost", b"lost", "resync", b"resync", "tcp_packets", b"tcp_packets", "tcp_ping_avg", b"tcp_ping_avg", "tcp_ping_var", b"tcp_ping_var", "timestamp", b"timestamp", "udp_packets", b"udp_packets", "udp_ping_avg", b"udp_ping_avg", "udp_ping_var", b"udp_ping_var"]) -> None: ...

global___Ping = Ping

@typing_extensions.final
class Reject(google.protobuf.message.Message):
    """Sent by the server when it rejects the user connection."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _RejectType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _RejectTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Reject._RejectType.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        WrongVersion: Reject._RejectType.ValueType  # 1
        """The client attempted to connect with an incompatible version."""
        InvalidUsername: Reject._RejectType.ValueType  # 2
        """The user name supplied by the client was invalid."""
        WrongUserPW: Reject._RejectType.ValueType  # 3
        """The client attempted to authenticate as a user with a password but it
        was wrong.
        """
        WrongServerPW: Reject._RejectType.ValueType  # 4
        """The client attempted to connect to a passworded server but the password
        was wrong.
        """
        UsernameInUse: Reject._RejectType.ValueType  # 5
        """Supplied username is already in use."""
        ServerFull: Reject._RejectType.ValueType  # 6
        """Server is currently full and cannot accept more users."""
        NoCertificate: Reject._RejectType.ValueType  # 7
        """The user did not provide a certificate but one is required."""
        AuthenticatorFail: Reject._RejectType.ValueType  # 8

    class RejectType(_RejectType, metaclass=_RejectTypeEnumTypeWrapper): ...
    WrongVersion: Reject.RejectType.ValueType  # 1
    """The client attempted to connect with an incompatible version."""
    InvalidUsername: Reject.RejectType.ValueType  # 2
    """The user name supplied by the client was invalid."""
    WrongUserPW: Reject.RejectType.ValueType  # 3
    """The client attempted to authenticate as a user with a password but it
    was wrong.
    """
    WrongServerPW: Reject.RejectType.ValueType  # 4
    """The client attempted to connect to a passworded server but the password
    was wrong.
    """
    UsernameInUse: Reject.RejectType.ValueType  # 5
    """Supplied username is already in use."""
    ServerFull: Reject.RejectType.ValueType  # 6
    """Server is currently full and cannot accept more users."""
    NoCertificate: Reject.RejectType.ValueType  # 7
    """The user did not provide a certificate but one is required."""
    AuthenticatorFail: Reject.RejectType.ValueType  # 8

    TYPE_FIELD_NUMBER: builtins.int
    REASON_FIELD_NUMBER: builtins.int
    type: global___Reject.RejectType.ValueType
    """Rejection type."""
    reason: builtins.str
    """Human readable rejection reason."""
    def __init__(
        self,
        *,
        type: global___Reject.RejectType.ValueType | None = ...,
        reason: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["reason", b"reason", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["reason", b"reason", "type", b"type"]) -> None: ...

global___Reject = Reject

@typing_extensions.final
class ServerSync(google.protobuf.message.Message):
    """ServerSync message is sent by the server when it has authenticated the user
    and finished synchronizing the server state.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SESSION_FIELD_NUMBER: builtins.int
    MAX_BANDWIDTH_FIELD_NUMBER: builtins.int
    WELCOME_TEXT_FIELD_NUMBER: builtins.int
    PERMISSIONS_FIELD_NUMBER: builtins.int
    session: builtins.int
    """The session of the current user."""
    max_bandwidth: builtins.int
    """Maximum bandwidth that the user should use."""
    welcome_text: builtins.str
    """Server welcome text."""
    permissions: builtins.int
    """Current user permissions in the root channel.
    Note: The permissions data type usually is uin32 (e.g. in PermissionQuery and PermissionDenied messages). Here
    it is uint64 because of an oversight in the past. Nonetheless it should never exceed the uin32 range.
    See also: https://github.com/mumble-voip/mumble/issues/5139
    """
    def __init__(
        self,
        *,
        session: builtins.int | None = ...,
        max_bandwidth: builtins.int | None = ...,
        welcome_text: builtins.str | None = ...,
        permissions: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["max_bandwidth", b"max_bandwidth", "permissions", b"permissions", "session", b"session", "welcome_text", b"welcome_text"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["max_bandwidth", b"max_bandwidth", "permissions", b"permissions", "session", b"session", "welcome_text", b"welcome_text"]) -> None: ...

global___ServerSync = ServerSync

@typing_extensions.final
class ChannelRemove(google.protobuf.message.Message):
    """Sent by the client when it wants a channel removed. Sent by the server when
    a channel has been removed and clients should be notified.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHANNEL_ID_FIELD_NUMBER: builtins.int
    channel_id: builtins.int
    def __init__(
        self,
        *,
        channel_id: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["channel_id", b"channel_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["channel_id", b"channel_id"]) -> None: ...

global___ChannelRemove = ChannelRemove

@typing_extensions.final
class ChannelState(google.protobuf.message.Message):
    """Used to communicate channel properties between the client and the server.
    Sent by the server during the login process or when channel properties are
    updated. Client may use this message to update said channel properties.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHANNEL_ID_FIELD_NUMBER: builtins.int
    PARENT_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    LINKS_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    LINKS_ADD_FIELD_NUMBER: builtins.int
    LINKS_REMOVE_FIELD_NUMBER: builtins.int
    TEMPORARY_FIELD_NUMBER: builtins.int
    POSITION_FIELD_NUMBER: builtins.int
    DESCRIPTION_HASH_FIELD_NUMBER: builtins.int
    MAX_USERS_FIELD_NUMBER: builtins.int
    IS_ENTER_RESTRICTED_FIELD_NUMBER: builtins.int
    CAN_ENTER_FIELD_NUMBER: builtins.int
    channel_id: builtins.int
    """Unique ID for the channel within the server."""
    parent: builtins.int
    """channel_id of the parent channel."""
    name: builtins.str
    """UTF-8 encoded channel name."""
    @property
    def links(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A collection of channel id values of the linked channels. Absent during
        the first channel listing.
        """
    description: builtins.str
    """UTF-8 encoded channel description. Only if the description is less than
    128 bytes
    """
    @property
    def links_add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A collection of channel_id values that should be added to links."""
    @property
    def links_remove(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A collection of channel_id values that should be removed from links."""
    temporary: builtins.bool
    """True if the channel is temporary."""
    position: builtins.int
    """Position weight to tweak the channel position in the channel list."""
    description_hash: builtins.bytes
    """SHA1 hash of the description if the description is 128 bytes or more."""
    max_users: builtins.int
    """Maximum number of users allowed in the channel. If this value is zero,
    the maximum number of users allowed in the channel is given by the
    server's "usersperchannel" setting.
    """
    is_enter_restricted: builtins.bool
    """Whether this channel has enter restrictions (ACL denying ENTER) set"""
    can_enter: builtins.bool
    """Whether the receiver of this msg is considered to be able to enter this channel"""
    def __init__(
        self,
        *,
        channel_id: builtins.int | None = ...,
        parent: builtins.int | None = ...,
        name: builtins.str | None = ...,
        links: collections.abc.Iterable[builtins.int] | None = ...,
        description: builtins.str | None = ...,
        links_add: collections.abc.Iterable[builtins.int] | None = ...,
        links_remove: collections.abc.Iterable[builtins.int] | None = ...,
        temporary: builtins.bool | None = ...,
        position: builtins.int | None = ...,
        description_hash: builtins.bytes | None = ...,
        max_users: builtins.int | None = ...,
        is_enter_restricted: builtins.bool | None = ...,
        can_enter: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["can_enter", b"can_enter", "channel_id", b"channel_id", "description", b"description", "description_hash", b"description_hash", "is_enter_restricted", b"is_enter_restricted", "max_users", b"max_users", "name", b"name", "parent", b"parent", "position", b"position", "temporary", b"temporary"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["can_enter", b"can_enter", "channel_id", b"channel_id", "description", b"description", "description_hash", b"description_hash", "is_enter_restricted", b"is_enter_restricted", "links", b"links", "links_add", b"links_add", "links_remove", b"links_remove", "max_users", b"max_users", "name", b"name", "parent", b"parent", "position", b"position", "temporary", b"temporary"]) -> None: ...

global___ChannelState = ChannelState

@typing_extensions.final
class UserRemove(google.protobuf.message.Message):
    """Used to communicate user leaving or being kicked. May be sent by the client
    when it attempts to kick a user. Sent by the server when it informs the
    clients that a user is not present anymore.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SESSION_FIELD_NUMBER: builtins.int
    ACTOR_FIELD_NUMBER: builtins.int
    REASON_FIELD_NUMBER: builtins.int
    BAN_FIELD_NUMBER: builtins.int
    session: builtins.int
    """The user who is being kicked, identified by their session, not present
    when no one is being kicked.
    """
    actor: builtins.int
    """The user who initiated the removal. Either the user who performs the kick
    or the user who is currently leaving.
    """
    reason: builtins.str
    """Reason for the kick, stored as the ban reason if the user is banned."""
    ban: builtins.bool
    """True if the kick should result in a ban."""
    def __init__(
        self,
        *,
        session: builtins.int | None = ...,
        actor: builtins.int | None = ...,
        reason: builtins.str | None = ...,
        ban: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["actor", b"actor", "ban", b"ban", "reason", b"reason", "session", b"session"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["actor", b"actor", "ban", b"ban", "reason", b"reason", "session", b"session"]) -> None: ...

global___UserRemove = UserRemove

@typing_extensions.final
class UserState(google.protobuf.message.Message):
    """Sent by the server when it communicates new and changed users to client.
    First seen during login procedure. May be sent by the client when it wishes
    to alter its state.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class VolumeAdjustment(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        LISTENING_CHANNEL_FIELD_NUMBER: builtins.int
        VOLUME_ADJUSTMENT_FIELD_NUMBER: builtins.int
        listening_channel: builtins.int
        volume_adjustment: builtins.float
        def __init__(
            self,
            *,
            listening_channel: builtins.int | None = ...,
            volume_adjustment: builtins.float | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["listening_channel", b"listening_channel", "volume_adjustment", b"volume_adjustment"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["listening_channel", b"listening_channel", "volume_adjustment", b"volume_adjustment"]) -> None: ...

    SESSION_FIELD_NUMBER: builtins.int
    ACTOR_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    USER_ID_FIELD_NUMBER: builtins.int
    CHANNEL_ID_FIELD_NUMBER: builtins.int
    MUTE_FIELD_NUMBER: builtins.int
    DEAF_FIELD_NUMBER: builtins.int
    SUPPRESS_FIELD_NUMBER: builtins.int
    SELF_MUTE_FIELD_NUMBER: builtins.int
    SELF_DEAF_FIELD_NUMBER: builtins.int
    TEXTURE_FIELD_NUMBER: builtins.int
    PLUGIN_CONTEXT_FIELD_NUMBER: builtins.int
    PLUGIN_IDENTITY_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    HASH_FIELD_NUMBER: builtins.int
    COMMENT_HASH_FIELD_NUMBER: builtins.int
    TEXTURE_HASH_FIELD_NUMBER: builtins.int
    PRIORITY_SPEAKER_FIELD_NUMBER: builtins.int
    RECORDING_FIELD_NUMBER: builtins.int
    TEMPORARY_ACCESS_TOKENS_FIELD_NUMBER: builtins.int
    LISTENING_CHANNEL_ADD_FIELD_NUMBER: builtins.int
    LISTENING_CHANNEL_REMOVE_FIELD_NUMBER: builtins.int
    LISTENING_VOLUME_ADJUSTMENT_FIELD_NUMBER: builtins.int
    session: builtins.int
    """Unique user session ID of the user whose state this is, may change on
    reconnect.
    """
    actor: builtins.int
    """The session of the user who is updating this user."""
    name: builtins.str
    """User name, UTF-8 encoded."""
    user_id: builtins.int
    """Registered user ID if the user is registered."""
    channel_id: builtins.int
    """Channel on which the user is."""
    mute: builtins.bool
    """True if the user is muted by admin."""
    deaf: builtins.bool
    """True if the user is deafened by admin."""
    suppress: builtins.bool
    """True if the user has been suppressed from talking by a reason other than
    being muted.
    """
    self_mute: builtins.bool
    """True if the user has muted self."""
    self_deaf: builtins.bool
    """True if the user has deafened self."""
    texture: builtins.bytes
    """User image if it is less than 128 bytes."""
    plugin_context: builtins.bytes
    """The positional audio plugin identifier.
    Positional audio information is only sent to users who share
    identical plugin contexts.

    This value is not transmitted to clients.
    """
    plugin_identity: builtins.str
    """The user's plugin-specific identity.
    This value is not transmitted to clients.
    """
    comment: builtins.str
    """User comment if it is less than 128 bytes."""
    hash: builtins.str
    """The hash of the user certificate."""
    comment_hash: builtins.bytes
    """SHA1 hash of the user comment if it 128 bytes or more."""
    texture_hash: builtins.bytes
    """SHA1 hash of the user picture if it 128 bytes or more."""
    priority_speaker: builtins.bool
    """True if the user is a priority speaker."""
    recording: builtins.bool
    """True if the user is currently recording."""
    @property
    def temporary_access_tokens(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A list of temporary access tokens to be respected when processing this request."""
    @property
    def listening_channel_add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A list of channels the user wants to start listening to."""
    @property
    def listening_channel_remove(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """a list of channels the user does no longer want to listen to."""
    @property
    def listening_volume_adjustment(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UserState.VolumeAdjustment]:
        """A list of volume adjustments the user has applied to listeners"""
    def __init__(
        self,
        *,
        session: builtins.int | None = ...,
        actor: builtins.int | None = ...,
        name: builtins.str | None = ...,
        user_id: builtins.int | None = ...,
        channel_id: builtins.int | None = ...,
        mute: builtins.bool | None = ...,
        deaf: builtins.bool | None = ...,
        suppress: builtins.bool | None = ...,
        self_mute: builtins.bool | None = ...,
        self_deaf: builtins.bool | None = ...,
        texture: builtins.bytes | None = ...,
        plugin_context: builtins.bytes | None = ...,
        plugin_identity: builtins.str | None = ...,
        comment: builtins.str | None = ...,
        hash: builtins.str | None = ...,
        comment_hash: builtins.bytes | None = ...,
        texture_hash: builtins.bytes | None = ...,
        priority_speaker: builtins.bool | None = ...,
        recording: builtins.bool | None = ...,
        temporary_access_tokens: collections.abc.Iterable[builtins.str] | None = ...,
        listening_channel_add: collections.abc.Iterable[builtins.int] | None = ...,
        listening_channel_remove: collections.abc.Iterable[builtins.int] | None = ...,
        listening_volume_adjustment: collections.abc.Iterable[global___UserState.VolumeAdjustment] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["actor", b"actor", "channel_id", b"channel_id", "comment", b"comment", "comment_hash", b"comment_hash", "deaf", b"deaf", "hash", b"hash", "mute", b"mute", "name", b"name", "plugin_context", b"plugin_context", "plugin_identity", b"plugin_identity", "priority_speaker", b"priority_speaker", "recording", b"recording", "self_deaf", b"self_deaf", "self_mute", b"self_mute", "session", b"session", "suppress", b"suppress", "texture", b"texture", "texture_hash", b"texture_hash", "user_id", b"user_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["actor", b"actor", "channel_id", b"channel_id", "comment", b"comment", "comment_hash", b"comment_hash", "deaf", b"deaf", "hash", b"hash", "listening_channel_add", b"listening_channel_add", "listening_channel_remove", b"listening_channel_remove", "listening_volume_adjustment", b"listening_volume_adjustment", "mute", b"mute", "name", b"name", "plugin_context", b"plugin_context", "plugin_identity", b"plugin_identity", "priority_speaker", b"priority_speaker", "recording", b"recording", "self_deaf", b"self_deaf", "self_mute", b"self_mute", "session", b"session", "suppress", b"suppress", "temporary_access_tokens", b"temporary_access_tokens", "texture", b"texture", "texture_hash", b"texture_hash", "user_id", b"user_id"]) -> None: ...

global___UserState = UserState

@typing_extensions.final
class BanList(google.protobuf.message.Message):
    """Relays information on the bans. The client may send the BanList message to
    either modify the list of bans or query them from the server. The server
    sends this list only after a client queries for it.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class BanEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ADDRESS_FIELD_NUMBER: builtins.int
        MASK_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        HASH_FIELD_NUMBER: builtins.int
        REASON_FIELD_NUMBER: builtins.int
        START_FIELD_NUMBER: builtins.int
        DURATION_FIELD_NUMBER: builtins.int
        address: builtins.bytes
        """Banned IP address."""
        mask: builtins.int
        """The length of the subnet mask for the ban."""
        name: builtins.str
        """User name for identification purposes (does not affect the ban)."""
        hash: builtins.str
        """The certificate hash of the banned user."""
        reason: builtins.str
        """Reason for the ban (does not affect the ban)."""
        start: builtins.str
        """Ban start time."""
        duration: builtins.int
        """Ban duration in seconds."""
        def __init__(
            self,
            *,
            address: builtins.bytes | None = ...,
            mask: builtins.int | None = ...,
            name: builtins.str | None = ...,
            hash: builtins.str | None = ...,
            reason: builtins.str | None = ...,
            start: builtins.str | None = ...,
            duration: builtins.int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["address", b"address", "duration", b"duration", "hash", b"hash", "mask", b"mask", "name", b"name", "reason", b"reason", "start", b"start"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["address", b"address", "duration", b"duration", "hash", b"hash", "mask", b"mask", "name", b"name", "reason", b"reason", "start", b"start"]) -> None: ...

    BANS_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    @property
    def bans(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___BanList.BanEntry]:
        """List of ban entries currently in place."""
    query: builtins.bool
    """True if the server should return the list, false if it should replace old
    ban list with the one provided.
    """
    def __init__(
        self,
        *,
        bans: collections.abc.Iterable[global___BanList.BanEntry] | None = ...,
        query: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["query", b"query"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bans", b"bans", "query", b"query"]) -> None: ...

global___BanList = BanList

@typing_extensions.final
class TextMessage(google.protobuf.message.Message):
    """Used to send and broadcast text messages."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTOR_FIELD_NUMBER: builtins.int
    SESSION_FIELD_NUMBER: builtins.int
    CHANNEL_ID_FIELD_NUMBER: builtins.int
    TREE_ID_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    actor: builtins.int
    """The message sender, identified by its session."""
    @property
    def session(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Target users for the message, identified by their session."""
    @property
    def channel_id(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The channels to which the message is sent, identified by their
        channel_ids.
        """
    @property
    def tree_id(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The root channels when sending message recursively to several channels,
        identified by their channel_ids.
        """
    message: builtins.str
    """The UTF-8 encoded message. May be HTML if the server allows."""
    def __init__(
        self,
        *,
        actor: builtins.int | None = ...,
        session: collections.abc.Iterable[builtins.int] | None = ...,
        channel_id: collections.abc.Iterable[builtins.int] | None = ...,
        tree_id: collections.abc.Iterable[builtins.int] | None = ...,
        message: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["actor", b"actor", "message", b"message"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["actor", b"actor", "channel_id", b"channel_id", "message", b"message", "session", b"session", "tree_id", b"tree_id"]) -> None: ...

global___TextMessage = TextMessage

@typing_extensions.final
class PermissionDenied(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _DenyType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _DenyTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[PermissionDenied._DenyType.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        Text: PermissionDenied._DenyType.ValueType  # 0
        """Operation denied for other reason, see reason field."""
        Permission: PermissionDenied._DenyType.ValueType  # 1
        """Permissions were denied."""
        SuperUser: PermissionDenied._DenyType.ValueType  # 2
        """Cannot modify SuperUser."""
        ChannelName: PermissionDenied._DenyType.ValueType  # 3
        """Invalid channel name."""
        TextTooLong: PermissionDenied._DenyType.ValueType  # 4
        """Text message too long."""
        H9K: PermissionDenied._DenyType.ValueType  # 5
        """The flux capacitor was spelled wrong."""
        TemporaryChannel: PermissionDenied._DenyType.ValueType  # 6
        """Operation not permitted in temporary channel."""
        MissingCertificate: PermissionDenied._DenyType.ValueType  # 7
        """Operation requires certificate."""
        UserName: PermissionDenied._DenyType.ValueType  # 8
        """Invalid username."""
        ChannelFull: PermissionDenied._DenyType.ValueType  # 9
        """Channel is full."""
        NestingLimit: PermissionDenied._DenyType.ValueType  # 10
        """Channels are nested too deeply."""
        ChannelCountLimit: PermissionDenied._DenyType.ValueType  # 11
        """Maximum channel count reached."""
        ChannelListenerLimit: PermissionDenied._DenyType.ValueType  # 12
        """Amount of listener objects for this channel has been reached"""
        UserListenerLimit: PermissionDenied._DenyType.ValueType  # 13
        """Amount of listener proxies for the user has been reached"""

    class DenyType(_DenyType, metaclass=_DenyTypeEnumTypeWrapper): ...
    Text: PermissionDenied.DenyType.ValueType  # 0
    """Operation denied for other reason, see reason field."""
    Permission: PermissionDenied.DenyType.ValueType  # 1
    """Permissions were denied."""
    SuperUser: PermissionDenied.DenyType.ValueType  # 2
    """Cannot modify SuperUser."""
    ChannelName: PermissionDenied.DenyType.ValueType  # 3
    """Invalid channel name."""
    TextTooLong: PermissionDenied.DenyType.ValueType  # 4
    """Text message too long."""
    H9K: PermissionDenied.DenyType.ValueType  # 5
    """The flux capacitor was spelled wrong."""
    TemporaryChannel: PermissionDenied.DenyType.ValueType  # 6
    """Operation not permitted in temporary channel."""
    MissingCertificate: PermissionDenied.DenyType.ValueType  # 7
    """Operation requires certificate."""
    UserName: PermissionDenied.DenyType.ValueType  # 8
    """Invalid username."""
    ChannelFull: PermissionDenied.DenyType.ValueType  # 9
    """Channel is full."""
    NestingLimit: PermissionDenied.DenyType.ValueType  # 10
    """Channels are nested too deeply."""
    ChannelCountLimit: PermissionDenied.DenyType.ValueType  # 11
    """Maximum channel count reached."""
    ChannelListenerLimit: PermissionDenied.DenyType.ValueType  # 12
    """Amount of listener objects for this channel has been reached"""
    UserListenerLimit: PermissionDenied.DenyType.ValueType  # 13
    """Amount of listener proxies for the user has been reached"""

    PERMISSION_FIELD_NUMBER: builtins.int
    CHANNEL_ID_FIELD_NUMBER: builtins.int
    SESSION_FIELD_NUMBER: builtins.int
    REASON_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    permission: builtins.int
    """The denied permission when type is Permission."""
    channel_id: builtins.int
    """channel_id for the channel where the permission was denied when type is
    Permission.
    """
    session: builtins.int
    """The user who was denied permissions, identified by session."""
    reason: builtins.str
    """Textual reason for the denial."""
    type: global___PermissionDenied.DenyType.ValueType
    """Type of the denial."""
    name: builtins.str
    """The name that is invalid when type is UserName."""
    def __init__(
        self,
        *,
        permission: builtins.int | None = ...,
        channel_id: builtins.int | None = ...,
        session: builtins.int | None = ...,
        reason: builtins.str | None = ...,
        type: global___PermissionDenied.DenyType.ValueType | None = ...,
        name: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["channel_id", b"channel_id", "name", b"name", "permission", b"permission", "reason", b"reason", "session", b"session", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["channel_id", b"channel_id", "name", b"name", "permission", b"permission", "reason", b"reason", "session", b"session", "type", b"type"]) -> None: ...

global___PermissionDenied = PermissionDenied

@typing_extensions.final
class ACL(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ChanGroup(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        INHERITED_FIELD_NUMBER: builtins.int
        INHERIT_FIELD_NUMBER: builtins.int
        INHERITABLE_FIELD_NUMBER: builtins.int
        ADD_FIELD_NUMBER: builtins.int
        REMOVE_FIELD_NUMBER: builtins.int
        INHERITED_MEMBERS_FIELD_NUMBER: builtins.int
        name: builtins.str
        """Name of the channel group, UTF-8 encoded."""
        inherited: builtins.bool
        """True if the group has been inherited from the parent (Read only)."""
        inherit: builtins.bool
        """True if the group members are inherited."""
        inheritable: builtins.bool
        """True if the group can be inherited by sub channels."""
        @property
        def add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """Users explicitly included in this group, identified by user_id."""
        @property
        def remove(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """Users explicitly removed from this group in this channel if the group
            has been inherited, identified by user_id.
            """
        @property
        def inherited_members(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """Users inherited, identified by user_id."""
        def __init__(
            self,
            *,
            name: builtins.str | None = ...,
            inherited: builtins.bool | None = ...,
            inherit: builtins.bool | None = ...,
            inheritable: builtins.bool | None = ...,
            add: collections.abc.Iterable[builtins.int] | None = ...,
            remove: collections.abc.Iterable[builtins.int] | None = ...,
            inherited_members: collections.abc.Iterable[builtins.int] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["inherit", b"inherit", "inheritable", b"inheritable", "inherited", b"inherited", "name", b"name"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["add", b"add", "inherit", b"inherit", "inheritable", b"inheritable", "inherited", b"inherited", "inherited_members", b"inherited_members", "name", b"name", "remove", b"remove"]) -> None: ...

    @typing_extensions.final
    class ChanACL(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        APPLY_HERE_FIELD_NUMBER: builtins.int
        APPLY_SUBS_FIELD_NUMBER: builtins.int
        INHERITED_FIELD_NUMBER: builtins.int
        USER_ID_FIELD_NUMBER: builtins.int
        GROUP_FIELD_NUMBER: builtins.int
        GRANT_FIELD_NUMBER: builtins.int
        DENY_FIELD_NUMBER: builtins.int
        apply_here: builtins.bool
        """True if this ACL applies to the current channel."""
        apply_subs: builtins.bool
        """True if this ACL applies to the sub channels."""
        inherited: builtins.bool
        """True if the ACL has been inherited from the parent."""
        user_id: builtins.int
        """ID of the user that is affected by this ACL."""
        group: builtins.str
        """ID of the group that is affected by this ACL."""
        grant: builtins.int
        """Bit flag field of the permissions granted by this ACL."""
        deny: builtins.int
        """Bit flag field of the permissions denied by this ACL."""
        def __init__(
            self,
            *,
            apply_here: builtins.bool | None = ...,
            apply_subs: builtins.bool | None = ...,
            inherited: builtins.bool | None = ...,
            user_id: builtins.int | None = ...,
            group: builtins.str | None = ...,
            grant: builtins.int | None = ...,
            deny: builtins.int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["apply_here", b"apply_here", "apply_subs", b"apply_subs", "deny", b"deny", "grant", b"grant", "group", b"group", "inherited", b"inherited", "user_id", b"user_id"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["apply_here", b"apply_here", "apply_subs", b"apply_subs", "deny", b"deny", "grant", b"grant", "group", b"group", "inherited", b"inherited", "user_id", b"user_id"]) -> None: ...

    CHANNEL_ID_FIELD_NUMBER: builtins.int
    INHERIT_ACLS_FIELD_NUMBER: builtins.int
    GROUPS_FIELD_NUMBER: builtins.int
    ACLS_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    channel_id: builtins.int
    """Channel ID of the channel this message affects."""
    inherit_acls: builtins.bool
    """True if the channel inherits its parent's ACLs."""
    @property
    def groups(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ACL.ChanGroup]:
        """User group specifications."""
    @property
    def acls(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ACL.ChanACL]:
        """ACL specifications."""
    query: builtins.bool
    """True if the message is a query for ACLs instead of setting them."""
    def __init__(
        self,
        *,
        channel_id: builtins.int | None = ...,
        inherit_acls: builtins.bool | None = ...,
        groups: collections.abc.Iterable[global___ACL.ChanGroup] | None = ...,
        acls: collections.abc.Iterable[global___ACL.ChanACL] | None = ...,
        query: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["channel_id", b"channel_id", "inherit_acls", b"inherit_acls", "query", b"query"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["acls", b"acls", "channel_id", b"channel_id", "groups", b"groups", "inherit_acls", b"inherit_acls", "query", b"query"]) -> None: ...

global___ACL = ACL

@typing_extensions.final
class QueryUsers(google.protobuf.message.Message):
    """Client may use this message to refresh its registered user information. The
    client should fill the IDs or Names of the users it wants to refresh. The
    server fills the missing parts and sends the message back.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDS_FIELD_NUMBER: builtins.int
    NAMES_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """user_ids."""
    @property
    def names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """User names in the same order as ids."""
    def __init__(
        self,
        *,
        ids: collections.abc.Iterable[builtins.int] | None = ...,
        names: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ids", b"ids", "names", b"names"]) -> None: ...

global___QueryUsers = QueryUsers

@typing_extensions.final
class CryptSetup(google.protobuf.message.Message):
    """Used to initialize and resync the UDP encryption. Either side may request a
    resync by sending the message without any values filled. The resync is
    performed by sending the message with only the client or server nonce
    filled.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    CLIENT_NONCE_FIELD_NUMBER: builtins.int
    SERVER_NONCE_FIELD_NUMBER: builtins.int
    key: builtins.bytes
    """Encryption key."""
    client_nonce: builtins.bytes
    """Client nonce."""
    server_nonce: builtins.bytes
    """Server nonce."""
    def __init__(
        self,
        *,
        key: builtins.bytes | None = ...,
        client_nonce: builtins.bytes | None = ...,
        server_nonce: builtins.bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["client_nonce", b"client_nonce", "key", b"key", "server_nonce", b"server_nonce"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["client_nonce", b"client_nonce", "key", b"key", "server_nonce", b"server_nonce"]) -> None: ...

global___CryptSetup = CryptSetup

@typing_extensions.final
class ContextActionModify(google.protobuf.message.Message):
    """Used to add or remove custom context menu item on client-side."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Context:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ContextEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ContextActionModify._Context.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        Server: ContextActionModify._Context.ValueType  # 1
        """Action is applicable to the server."""
        Channel: ContextActionModify._Context.ValueType  # 2
        """Action can target a Channel."""
        User: ContextActionModify._Context.ValueType  # 4
        """Action can target a User."""

    class Context(_Context, metaclass=_ContextEnumTypeWrapper): ...
    Server: ContextActionModify.Context.ValueType  # 1
    """Action is applicable to the server."""
    Channel: ContextActionModify.Context.ValueType  # 2
    """Action can target a Channel."""
    User: ContextActionModify.Context.ValueType  # 4
    """Action can target a User."""

    class _Operation:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _OperationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ContextActionModify._Operation.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        Add: ContextActionModify._Operation.ValueType  # 0
        Remove: ContextActionModify._Operation.ValueType  # 1

    class Operation(_Operation, metaclass=_OperationEnumTypeWrapper): ...
    Add: ContextActionModify.Operation.ValueType  # 0
    Remove: ContextActionModify.Operation.ValueType  # 1

    ACTION_FIELD_NUMBER: builtins.int
    TEXT_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    OPERATION_FIELD_NUMBER: builtins.int
    action: builtins.str
    """The action identifier. Used later to initiate an action."""
    text: builtins.str
    """The display name of the action."""
    context: builtins.int
    """Context bit flags defining where the action should be displayed. 
    Flags can be OR-ed to combine different types.
    """
    operation: global___ContextActionModify.Operation.ValueType
    """Choose either to add or to remove the context action.
    Note: This field only exists after Mumble 1.2.4-beta1 release.
          The message will be recognized as Add regardless of this field 
          before said release.
    """
    def __init__(
        self,
        *,
        action: builtins.str | None = ...,
        text: builtins.str | None = ...,
        context: builtins.int | None = ...,
        operation: global___ContextActionModify.Operation.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["action", b"action", "context", b"context", "operation", b"operation", "text", b"text"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["action", b"action", "context", b"context", "operation", b"operation", "text", b"text"]) -> None: ...

global___ContextActionModify = ContextActionModify

@typing_extensions.final
class ContextAction(google.protobuf.message.Message):
    """Sent by the client when it wants to initiate a Context action."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SESSION_FIELD_NUMBER: builtins.int
    CHANNEL_ID_FIELD_NUMBER: builtins.int
    ACTION_FIELD_NUMBER: builtins.int
    session: builtins.int
    """The target User for the action, identified by session."""
    channel_id: builtins.int
    """The target Channel for the action, identified by channel_id."""
    action: builtins.str
    """The action that should be executed."""
    def __init__(
        self,
        *,
        session: builtins.int | None = ...,
        channel_id: builtins.int | None = ...,
        action: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["action", b"action", "channel_id", b"channel_id", "session", b"session"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["action", b"action", "channel_id", b"channel_id", "session", b"session"]) -> None: ...

global___ContextAction = ContextAction

@typing_extensions.final
class UserList(google.protobuf.message.Message):
    """Lists the registered users."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class User(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        USER_ID_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        LAST_SEEN_FIELD_NUMBER: builtins.int
        LAST_CHANNEL_FIELD_NUMBER: builtins.int
        user_id: builtins.int
        """Registered user ID."""
        name: builtins.str
        """Registered user name."""
        last_seen: builtins.str
        last_channel: builtins.int
        def __init__(
            self,
            *,
            user_id: builtins.int | None = ...,
            name: builtins.str | None = ...,
            last_seen: builtins.str | None = ...,
            last_channel: builtins.int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["last_channel", b"last_channel", "last_seen", b"last_seen", "name", b"name", "user_id", b"user_id"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["last_channel", b"last_channel", "last_seen", b"last_seen", "name", b"name", "user_id", b"user_id"]) -> None: ...

    USERS_FIELD_NUMBER: builtins.int
    @property
    def users(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UserList.User]:
        """A list of registered users."""
    def __init__(
        self,
        *,
        users: collections.abc.Iterable[global___UserList.User] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["users", b"users"]) -> None: ...

global___UserList = UserList

@typing_extensions.final
class VoiceTarget(google.protobuf.message.Message):
    """Sent by the client when it wants to register or clear whisper targets.

    Note: The first available target ID is 1 as 0 is reserved for normal
    talking. Maximum target ID is 30.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Target(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SESSION_FIELD_NUMBER: builtins.int
        CHANNEL_ID_FIELD_NUMBER: builtins.int
        GROUP_FIELD_NUMBER: builtins.int
        LINKS_FIELD_NUMBER: builtins.int
        CHILDREN_FIELD_NUMBER: builtins.int
        @property
        def session(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """Users that are included as targets."""
        channel_id: builtins.int
        """Channel that is included as a target."""
        group: builtins.str
        """ACL group that is included as a target."""
        links: builtins.bool
        """True if the voice should follow links from the specified channel."""
        children: builtins.bool
        """True if the voice should also be sent to children of the specific
        channel.
        """
        def __init__(
            self,
            *,
            session: collections.abc.Iterable[builtins.int] | None = ...,
            channel_id: builtins.int | None = ...,
            group: builtins.str | None = ...,
            links: builtins.bool | None = ...,
            children: builtins.bool | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["channel_id", b"channel_id", "children", b"children", "group", b"group", "links", b"links"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["channel_id", b"channel_id", "children", b"children", "group", b"group", "links", b"links", "session", b"session"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    TARGETS_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Voice target ID."""
    @property
    def targets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___VoiceTarget.Target]:
        """The receivers that this voice target includes."""
    def __init__(
        self,
        *,
        id: builtins.int | None = ...,
        targets: collections.abc.Iterable[global___VoiceTarget.Target] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["id", b"id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id", b"id", "targets", b"targets"]) -> None: ...

global___VoiceTarget = VoiceTarget

@typing_extensions.final
class PermissionQuery(google.protobuf.message.Message):
    """Sent by the client when it wants permissions for a certain channel. Sent by
    the server when it replies to the query or wants the user to resync all
    channel permissions.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHANNEL_ID_FIELD_NUMBER: builtins.int
    PERMISSIONS_FIELD_NUMBER: builtins.int
    FLUSH_FIELD_NUMBER: builtins.int
    channel_id: builtins.int
    """channel_id of the channel for which the permissions are queried."""
    permissions: builtins.int
    """Channel permissions."""
    flush: builtins.bool
    """True if the client should drop its current permission information for all
    channels.
    """
    def __init__(
        self,
        *,
        channel_id: builtins.int | None = ...,
        permissions: builtins.int | None = ...,
        flush: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["channel_id", b"channel_id", "flush", b"flush", "permissions", b"permissions"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["channel_id", b"channel_id", "flush", b"flush", "permissions", b"permissions"]) -> None: ...

global___PermissionQuery = PermissionQuery

@typing_extensions.final
class CodecVersion(google.protobuf.message.Message):
    """Sent by the server to notify the users of the version of the CELT codec they
    should use. This may change during the connection when new users join.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ALPHA_FIELD_NUMBER: builtins.int
    BETA_FIELD_NUMBER: builtins.int
    PREFER_ALPHA_FIELD_NUMBER: builtins.int
    OPUS_FIELD_NUMBER: builtins.int
    alpha: builtins.int
    """The version of the CELT Alpha codec."""
    beta: builtins.int
    """The version of the CELT Beta codec."""
    prefer_alpha: builtins.bool
    """True if the user should prefer Alpha over Beta."""
    opus: builtins.bool
    def __init__(
        self,
        *,
        alpha: builtins.int | None = ...,
        beta: builtins.int | None = ...,
        prefer_alpha: builtins.bool | None = ...,
        opus: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["alpha", b"alpha", "beta", b"beta", "opus", b"opus", "prefer_alpha", b"prefer_alpha"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alpha", b"alpha", "beta", b"beta", "opus", b"opus", "prefer_alpha", b"prefer_alpha"]) -> None: ...

global___CodecVersion = CodecVersion

@typing_extensions.final
class UserStats(google.protobuf.message.Message):
    """Used to communicate user stats between the server and clients."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Stats(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        GOOD_FIELD_NUMBER: builtins.int
        LATE_FIELD_NUMBER: builtins.int
        LOST_FIELD_NUMBER: builtins.int
        RESYNC_FIELD_NUMBER: builtins.int
        good: builtins.int
        """The amount of good packets received."""
        late: builtins.int
        """The amount of late packets received."""
        lost: builtins.int
        """The amount of packets never received."""
        resync: builtins.int
        """The amount of nonce resyncs."""
        def __init__(
            self,
            *,
            good: builtins.int | None = ...,
            late: builtins.int | None = ...,
            lost: builtins.int | None = ...,
            resync: builtins.int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["good", b"good", "late", b"late", "lost", b"lost", "resync", b"resync"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["good", b"good", "late", b"late", "lost", b"lost", "resync", b"resync"]) -> None: ...

    SESSION_FIELD_NUMBER: builtins.int
    STATS_ONLY_FIELD_NUMBER: builtins.int
    CERTIFICATES_FIELD_NUMBER: builtins.int
    FROM_CLIENT_FIELD_NUMBER: builtins.int
    FROM_SERVER_FIELD_NUMBER: builtins.int
    UDP_PACKETS_FIELD_NUMBER: builtins.int
    TCP_PACKETS_FIELD_NUMBER: builtins.int
    UDP_PING_AVG_FIELD_NUMBER: builtins.int
    UDP_PING_VAR_FIELD_NUMBER: builtins.int
    TCP_PING_AVG_FIELD_NUMBER: builtins.int
    TCP_PING_VAR_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    CELT_VERSIONS_FIELD_NUMBER: builtins.int
    ADDRESS_FIELD_NUMBER: builtins.int
    BANDWIDTH_FIELD_NUMBER: builtins.int
    ONLINESECS_FIELD_NUMBER: builtins.int
    IDLESECS_FIELD_NUMBER: builtins.int
    STRONG_CERTIFICATE_FIELD_NUMBER: builtins.int
    OPUS_FIELD_NUMBER: builtins.int
    session: builtins.int
    """User whose stats these are."""
    stats_only: builtins.bool
    """True if the message contains only mutable stats (packets, ping)."""
    @property
    def certificates(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]:
        """Full user certificate chain of the user certificate in DER format."""
    @property
    def from_client(self) -> global___UserStats.Stats:
        """Packet statistics for packets received from the client."""
    @property
    def from_server(self) -> global___UserStats.Stats:
        """Packet statistics for packets sent by the server."""
    udp_packets: builtins.int
    """Amount of UDP packets sent."""
    tcp_packets: builtins.int
    """Amount of TCP packets sent."""
    udp_ping_avg: builtins.float
    """UDP ping average."""
    udp_ping_var: builtins.float
    """UDP ping variance."""
    tcp_ping_avg: builtins.float
    """TCP ping average."""
    tcp_ping_var: builtins.float
    """TCP ping variance."""
    @property
    def version(self) -> global___Version:
        """Client version."""
    @property
    def celt_versions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A list of CELT bitstream version constants supported by the client of this
        user.
        """
    address: builtins.bytes
    """Client IP address."""
    bandwidth: builtins.int
    """Bandwidth used by this client."""
    onlinesecs: builtins.int
    """Connection duration."""
    idlesecs: builtins.int
    """Duration since last activity."""
    strong_certificate: builtins.bool
    """True if the user has a strong certificate."""
    opus: builtins.bool
    def __init__(
        self,
        *,
        session: builtins.int | None = ...,
        stats_only: builtins.bool | None = ...,
        certificates: collections.abc.Iterable[builtins.bytes] | None = ...,
        from_client: global___UserStats.Stats | None = ...,
        from_server: global___UserStats.Stats | None = ...,
        udp_packets: builtins.int | None = ...,
        tcp_packets: builtins.int | None = ...,
        udp_ping_avg: builtins.float | None = ...,
        udp_ping_var: builtins.float | None = ...,
        tcp_ping_avg: builtins.float | None = ...,
        tcp_ping_var: builtins.float | None = ...,
        version: global___Version | None = ...,
        celt_versions: collections.abc.Iterable[builtins.int] | None = ...,
        address: builtins.bytes | None = ...,
        bandwidth: builtins.int | None = ...,
        onlinesecs: builtins.int | None = ...,
        idlesecs: builtins.int | None = ...,
        strong_certificate: builtins.bool | None = ...,
        opus: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["address", b"address", "bandwidth", b"bandwidth", "from_client", b"from_client", "from_server", b"from_server", "idlesecs", b"idlesecs", "onlinesecs", b"onlinesecs", "opus", b"opus", "session", b"session", "stats_only", b"stats_only", "strong_certificate", b"strong_certificate", "tcp_packets", b"tcp_packets", "tcp_ping_avg", b"tcp_ping_avg", "tcp_ping_var", b"tcp_ping_var", "udp_packets", b"udp_packets", "udp_ping_avg", b"udp_ping_avg", "udp_ping_var", b"udp_ping_var", "version", b"version"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["address", b"address", "bandwidth", b"bandwidth", "celt_versions", b"celt_versions", "certificates", b"certificates", "from_client", b"from_client", "from_server", b"from_server", "idlesecs", b"idlesecs", "onlinesecs", b"onlinesecs", "opus", b"opus", "session", b"session", "stats_only", b"stats_only", "strong_certificate", b"strong_certificate", "tcp_packets", b"tcp_packets", "tcp_ping_avg", b"tcp_ping_avg", "tcp_ping_var", b"tcp_ping_var", "udp_packets", b"udp_packets", "udp_ping_avg", b"udp_ping_avg", "udp_ping_var", b"udp_ping_var", "version", b"version"]) -> None: ...

global___UserStats = UserStats

@typing_extensions.final
class RequestBlob(google.protobuf.message.Message):
    """Used by the client to request binary data from the server. By default large
    comments or textures are not sent within standard messages but instead the
    hash is. If the client does not recognize the hash it may request the
    resource when it needs it. The client does so by sending a RequestBlob
    message with the correct fields filled with the user sessions or channel_ids
    it wants to receive. The server replies to this by sending a new
    UserState/ChannelState message with the resources filled even if they would
    normally be transmitted as hashes.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SESSION_TEXTURE_FIELD_NUMBER: builtins.int
    SESSION_COMMENT_FIELD_NUMBER: builtins.int
    CHANNEL_DESCRIPTION_FIELD_NUMBER: builtins.int
    @property
    def session_texture(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """sessions of the requested UserState textures."""
    @property
    def session_comment(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """sessions of the requested UserState comments."""
    @property
    def channel_description(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """channel_ids of the requested ChannelState descriptions."""
    def __init__(
        self,
        *,
        session_texture: collections.abc.Iterable[builtins.int] | None = ...,
        session_comment: collections.abc.Iterable[builtins.int] | None = ...,
        channel_description: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["channel_description", b"channel_description", "session_comment", b"session_comment", "session_texture", b"session_texture"]) -> None: ...

global___RequestBlob = RequestBlob

@typing_extensions.final
class ServerConfig(google.protobuf.message.Message):
    """Sent by the server when it informs the clients on server configuration
    details.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAX_BANDWIDTH_FIELD_NUMBER: builtins.int
    WELCOME_TEXT_FIELD_NUMBER: builtins.int
    ALLOW_HTML_FIELD_NUMBER: builtins.int
    MESSAGE_LENGTH_FIELD_NUMBER: builtins.int
    IMAGE_MESSAGE_LENGTH_FIELD_NUMBER: builtins.int
    MAX_USERS_FIELD_NUMBER: builtins.int
    RECORDING_ALLOWED_FIELD_NUMBER: builtins.int
    max_bandwidth: builtins.int
    """The maximum bandwidth the clients should use."""
    welcome_text: builtins.str
    """Server welcome text."""
    allow_html: builtins.bool
    """True if the server allows HTML."""
    message_length: builtins.int
    """Maximum text message length."""
    image_message_length: builtins.int
    """Maximum image message length."""
    max_users: builtins.int
    """The maximum number of users allowed on the server."""
    recording_allowed: builtins.bool
    """Whether using Mumble's recording feature is allowed on the server"""
    def __init__(
        self,
        *,
        max_bandwidth: builtins.int | None = ...,
        welcome_text: builtins.str | None = ...,
        allow_html: builtins.bool | None = ...,
        message_length: builtins.int | None = ...,
        image_message_length: builtins.int | None = ...,
        max_users: builtins.int | None = ...,
        recording_allowed: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["allow_html", b"allow_html", "image_message_length", b"image_message_length", "max_bandwidth", b"max_bandwidth", "max_users", b"max_users", "message_length", b"message_length", "recording_allowed", b"recording_allowed", "welcome_text", b"welcome_text"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_html", b"allow_html", "image_message_length", b"image_message_length", "max_bandwidth", b"max_bandwidth", "max_users", b"max_users", "message_length", b"message_length", "recording_allowed", b"recording_allowed", "welcome_text", b"welcome_text"]) -> None: ...

global___ServerConfig = ServerConfig

@typing_extensions.final
class SuggestConfig(google.protobuf.message.Message):
    """Sent by the server to inform the clients of suggested client configuration
    specified by the server administrator.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERSION_V1_FIELD_NUMBER: builtins.int
    VERSION_V2_FIELD_NUMBER: builtins.int
    POSITIONAL_FIELD_NUMBER: builtins.int
    PUSH_TO_TALK_FIELD_NUMBER: builtins.int
    version_v1: builtins.int
    """Suggested client version in the legacy format."""
    version_v2: builtins.int
    """Suggested client version in the new format.
    Necessary since patch level may exceed 255. (See https://github.com/mumble-voip/mumble/issues/5827)
    """
    positional: builtins.bool
    """True if the administrator suggests positional audio to be used on this
    server.
    """
    push_to_talk: builtins.bool
    """True if the administrator suggests push to talk to be used on this server."""
    def __init__(
        self,
        *,
        version_v1: builtins.int | None = ...,
        version_v2: builtins.int | None = ...,
        positional: builtins.bool | None = ...,
        push_to_talk: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["positional", b"positional", "push_to_talk", b"push_to_talk", "version_v1", b"version_v1", "version_v2", b"version_v2"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["positional", b"positional", "push_to_talk", b"push_to_talk", "version_v1", b"version_v1", "version_v2", b"version_v2"]) -> None: ...

global___SuggestConfig = SuggestConfig

@typing_extensions.final
class PluginDataTransmission(google.protobuf.message.Message):
    """Used to send plugin messages between clients"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SENDERSESSION_FIELD_NUMBER: builtins.int
    RECEIVERSESSIONS_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    DATAID_FIELD_NUMBER: builtins.int
    senderSession: builtins.int
    """The session ID of the client this message was sent from"""
    @property
    def receiverSessions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The session IDs of the clients that should receive this message"""
    data: builtins.bytes
    """The data that is sent"""
    dataID: builtins.str
    """The ID of the sent data. This will be used by plugins to check whether they will
    process it or not
    """
    def __init__(
        self,
        *,
        senderSession: builtins.int | None = ...,
        receiverSessions: collections.abc.Iterable[builtins.int] | None = ...,
        data: builtins.bytes | None = ...,
        dataID: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data", b"data", "dataID", b"dataID", "senderSession", b"senderSession"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["data", b"data", "dataID", b"dataID", "receiverSessions", b"receiverSessions", "senderSession", b"senderSession"]) -> None: ...

global___PluginDataTransmission = PluginDataTransmission
